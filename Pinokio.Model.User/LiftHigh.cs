//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pinokio.Model.User
{
    using Logger;
    using Pinokio.Database;
    using Pinokio.Geometry;
    using Pinokio.Model.Base;
    using global::Simulation.Engine;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Data;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;


    public class LiftHigh : TXNode
    {
        SimObj entity = null;

        [Storable (false)]
        int currentState = LiftHigh.READY;
        int downTime = 10;
        int upTime = 10;
        int comeTime = 10;
        int leaveTime = 5;
        PVector3 startPos = new PVector3();
        Time stateStartTime = 0;

        double enter_height = 1200;
        double enter_length = 1400;
        double leave_length = 800;
        double desposition_height = 10000;
        const int COME = 104;
        const int UP = 105;
        const int DOWN = 106;
        const int OUT = 107;
        const int READY = 108;
        public LiftHigh()
        {
        }

        public LiftHigh(uint id, string name) :
                base(id, name)
        {
            // Write your code here.
        }

        public override void InitializeNode(EventCalendar evtCal)
        {
            try
            {
                // Write your code here.
                base.InitializeNode(evtCal);

                stateStartTime = 0;
                currentState = LiftHigh.READY;
                entity = null;
                EnteredObjects.Clear();
                RequestedObjects.Clear();
                ArrivedPorts.Clear();
            }
            catch (System.Exception ex)
            {
                // Handle any other exception type here.
                ErrorLogger.SaveLog(ex);
            }
        }

        public override void InternalFunction(Time simTime, SimPort port)
        {
            base.InternalFunction(simTime, port);

            // Write your code here.
            currentState = port.PortType;

            switch (port.PortType)
            {
                case LiftHigh.COME:

                    stateStartTime = simTime;
                    startPos = port.Object.PosVec3;
                    port = new SimPort(LiftHigh.UP, port.Object);
                    EvtCalendar.AddEvent(simTime + this.comeTime, this, port);
                    break;

                case LiftHigh.UP:


                    stateStartTime = simTime;
                    startPos = port.Object.PosVec3;
                    port = new SimPort(LiftHigh.OUT, port.Object);
                    EvtCalendar.AddEvent(simTime + this.upTime, this, port);
                    break;
                case LiftHigh.OUT:

                    stateStartTime = simTime;
                    startPos = port.Object.PosVec3;

               

                    port = new SimPort(LiftHigh.READY, port.Object);
                    SimPort outPort = new SimPort(INT_PORT.MOVE, port.Object);

                    EvtCalendar.AddEvent(simTime + this.leaveTime, this, outPort);

                    EvtCalendar.AddEvent(simTime + this.downTime, this, port);
                    break;
                case LiftHigh.READY:
                    Request2EnterArrivedObjects(simTime);
                    break;
                case INT_PORT.MOVE:
                    // 다음 노드로 전달.
                    OutEntity(simTime, port);
                    break;
                default:
                    break;
            }
        }

        public override void ExternalFunction(Time simTime, SimPort port)
        {
            base.ExternalFunction(simTime, port);
            // Write your code here.
            switch (port.PortType)
            {
                default:
                    break;
            }
        }


        private void OutEntity(Time simTime, SimPort port)
        {
            try
            {
                if (OutLinkNodes.Count > 0)
                {
                    SimPort newPort = new SimPort(EXT_PORT.ARRIVE, port.Object, this);
                    OutLinkNodes[0].ExternalFunction(simTime, newPort);
                }

            }
            catch (System.Exception ex)
            {
                // Handle any other exception type here.
                ErrorLogger.SaveLog(ex);
            }

        }
        protected override void Leave(Time simTime, SimPort port)
        {

            try
            {
                entity = null;
                Request2EnterArrivedObjects(simTime);
            }
            catch (System.Exception ex)
            {
                // Handle any other exception type here.
                ErrorLogger.SaveLog(ex);
            }

        }
        public override bool IsEnter(SimPort port)
        {
            try
            {
                if (entity == null && this.currentState == LiftHigh.READY)
                    return true;
                else
                    return false;
            }
            catch (System.Exception ex)
            {
                // Handle any other exception type here.
                ErrorLogger.SaveLog(ex);
            }
            return false;
        }
        protected override void Enter(Time simTime, SimPort port)
        {

            try
            {
                entity = port.Object;

                port = new SimPort(LiftHigh.COME, port.Object);
                EvtCalendar.AddEvent(simTime, this, port);
                ((Part)port.Object).PosVec3 = this.PosVec3;

            }
            catch (System.Exception ex)
            {
                // Handle any other exception type here.
                ErrorLogger.SaveLog(ex);
            }
        }

        public override void UpdateAnimationPos()
        {
            if (entity == null)
                return;

            Time currentTime = SimEngine.Instance.TimeNow;
            double secTime = (currentTime - stateStartTime).ToSecond();

            if (currentState == LiftHigh.COME)
            {
                double comeVelocity = this.enter_length / comeTime;

                double z = secTime * comeVelocity + startPos.Z;


                double [] vector =  SimObj.Dgemv(this.RotateMatrix, new double[4] { 0, 1, 0, 0 });
                double sx = this.PosVec3.X - 600 * vector[0];
                double sY = this.PosVec3.Y - 600 * vector[1];
                double sZ = enter_height;

                entity.PosVec3 = new PVector3(
                    sx + secTime * comeVelocity * vector[0],
                    sY + secTime * comeVelocity * vector[1],
                    sZ);

            }
            else if (currentState == LiftHigh.UP)
            {
                double comeVelocity = this.desposition_height / upTime;

                double z = secTime * comeVelocity + startPos.Z;

                entity.PosVec3 = new PVector3(entity.PosVec3.X, entity.PosVec3.Y, z);


            }
            else if (currentState == LiftHigh.OUT)
            {
              

                if (secTime < this.leaveTime)
                {
                    // 엘베 에서 Entity 나가는 중

                    double comeVelocity = this.leave_length / (leaveTime / ModelManager.Instance.AnimationNode.UpdateTimeSec);


                    double[] vector = SimObj.Dgemv(this.RotateMatrix, new double[4] { 0, 1, 0, 0 });
                    entity.PosVec3 = new PVector3(
           entity.PosVec3.X -  comeVelocity * vector[0],
           entity.PosVec3.Y -  comeVelocity * vector[1],
           entity.PosVec3.Z);
                }
                if (secTime<  this.downTime)
                {
                    // 엘베 내려가는중

                }

            }


        }
    }
}
